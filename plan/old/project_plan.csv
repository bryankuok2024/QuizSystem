"步驟","子任務 ID","子任務描述","AI Prompt (開發指示)"
"步驟 1: 解決 django-allauth 剩餘嘅廢棄警告","1.1","更新 ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE","請檢查 django-allauth 嘅最新文檔，了解 ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE 嘅替代方案。然後修改 core_settings/settings.py 文件，使用新嘅推薦設置 (可能係 ACCOUNT_SIGNUP_FORM_CLASS 或者調整 ACCOUNT_SIGNUP_FIELDS)嚟達到類似嘅效果，例如確保用戶註冊時某啲欄位係必填或者有特定驗證。"
"步驟 1: 解決 django-allauth 剩餘嘅廢棄警告","1.2","更新 ACCOUNT_USERNAME_REQUIRED","請檢查 django-allauth 嘅最新文檔，了解 ACCOUNT_USERNAME_REQUIRED 嘅替代方案。然後修改 core_settings/settings.py 文件，使用新嘅推薦設置 (可能係調整 ACCOUNT_USER_MODEL_USERNAME_FIELD 設為 None 如果唔再需要用戶名，或者調整 ACCOUNT_SIGNUP_FIELDS 嚟決定註冊時需要邊啲欄位)。"
"步驟 2: 完善模擬考試功能","2.1","加入計時器","請喺 questions/practice_quiz_interface.html 模板度為模擬考試加入一個倒數計時器。你可以用 JavaScript 實現。計時器嘅時長可以考慮將來由科目或者考試設置度動態設定。"
"步驟 2: 完善模擬考試功能","2.2","實現計分同結果顯示","修改 questions/views.py 中嘅 practice_quiz_view (或者創建一個新嘅 view)。當用戶提交模擬考試答案後，後端需要：1. 接收並處理提交嘅答案。 2. 同正確答案比較，計算得分。 3. 準備一個包含詳細結果嘅 context，例如每題嘅對錯、用戶答案、正確答案、總分。 4. 渲染一個新嘅模板 (例如 practice_quiz_results.html) 去顯示呢啲結果。"
"步驟 2: 完善模擬考試功能","2.3","區分練習模式同考試模式 (可選，但建議)","考慮喺 practice_quiz_view 或者相關模型度加入一個參數或者邏輯，用嚟區分『練習模式』（例如可以即時睇答案）同『考試模式』（例如只喺最後先顯示總結果同分數，過程唔可以睇答案）。"
"步驟 3: 實現用戶進度追蹤","3.1","創建 UserProgress 模型","喺 users app (或者一個新嘅 progress app) 裡面創建一個新嘅 Django 模型 UserProgress。佢應該包含以下字段：user (ForeignKey to User), question (ForeignKey to Question), subject (ForeignKey to Subject, 可選，但方便按科目統計), answered_correctly (BooleanField), attempt_date (DateTimeField, auto_now_add=True), score_if_exam (IntegerField, nullable=True, blank=True, 用嚟記錄某次模擬考試嘅總分), exam_session_id (CharField, nullable=True, blank=True, 用嚟將同一次考試嘅多條記錄關聯起嚟)。請確保運行 makemigrations 同 migrate。"
"步驟 3: 實現用戶進度追蹤","3.2","更新 View 記錄進度","修改 questions/views.py 裡面處理答案提交嘅邏輯 (例如 practice_quiz_view 或者相關嘅答案處理函數)。當用戶提交答案後，為每條題目創建或更新 UserProgress 記錄。"
"步驟 3: 實現用戶進度追蹤","3.3","創建學習報告頁面","創建一個新嘅 view 同 template，用嚟顯示用戶嘅學習報告。報告可以包括：按科目統計嘅已完成題目數量、正確率、模擬考試平均分等。從 UserProgress 模型度提取數據。"
"步驟 4: 實現錯題練習功能","4.1","獲取用戶錯題","創建一個新嘅 view，例如 practice_wrong_answers_view。呢個 view 應該：1. 接收用戶同可能嘅科目 ID。 2. 從 UserProgress 模型查詢該用戶答錯過嘅題目 (answered_correctly=False)。 3. 可以考慮加入邏輯，例如只顯示最近答錯嘅，或者某個科目下答錯嘅。"
"步驟 4: 實現錯題練習功能","4.2","提供錯題練習界面","為 practice_wrong_answers_view 創建一個 template。呢個 template 應該同 practice_quiz_interface.html 類似，但係只顯示用戶答錯過嘅題目，畀佢哋重新練習。"
"步驟 5: 實現收費系統","5.1","創建相關模型 (可選，但推薦)","考慮喺一個新嘅 payments app 裡面創建模型，例如：Product 或 PurchasableItem (例如代表一個科目嘅題庫，包含價格等信息)。Transaction (記錄用戶ID、購買嘅產品、金額、支付狀態 - e.g., pending, confirmed、交易時間、管理員備註等)。UserSubscription 或 UserAccess (記錄用戶對邊啲科目或者產品有權限，以及有效期等)。"
"步驟 5: 實現收費系統","5.2","顯示靜態 QR Code","喺需要支付嘅地方 (例如科目詳情頁或者一個專門嘅購買頁面)，顯示預先準備好嘅 MPay 同中銀靜態 QR code 圖片。"
"步驟 5: 實現收費系統","5.3","「已付款」按鈕同電郵通知","喺顯示 QR code 嘅頁面加入一個『我已付款』按鈕。1. 當用戶點擊呢個按鈕，前端可以提交一個表單，或者用 AJAX 發送請求到後端一個新嘅 view。 2. 後端 view 接收到請求後，可以記錄一筆待確認嘅交易 (例如更新 Transaction 狀態為 'pending_confirmation')。 3. 然後，系統需要發送一封電郵俾管理員，通知佢有新嘅付款待確認。郵件內容應包含用戶信息同佢想購買嘅產品/科目。"
"步驟 5: 實現收費系統","5.4","管理員手動確認同開通賬號","喺 Django Admin 界面或者一個自定義嘅管理員儀表板，管理員應該可以：1. 睇到待確認嘅交易列表。 2. 核對實際收款情況後，將交易狀態更新為 'confirmed'。 3. 開通該用戶對應科目嘅訪問權限 (例如創建 UserAccess 記錄，或者更新用戶 profile 裡面嘅一個字段)。"
"步驟 6: 實現試玩功能限制","6.1","追蹤試玩用量","需要決定點樣追蹤試玩。可以考慮：喺 UserProfile (如果有的話) 或者 User 模型度加入字段，例如 last_trial_access_date, trial_questions_answered_today。或者創建一個專門嘅 TrialUsage 模型記錄用戶ID、試玩日期、已用題數等。"
"步驟 6: 實現試玩功能限制","6.2","執行限制邏輯","創建 Django middleware 或者喺相關嘅 view (例如 practice_quiz_view) 開頭加入邏輯。1. 檢查用戶係咪試玩緊 (例如，佢未購買該科目)。 2. 如果係試玩，就檢查佢嘅試玩用量有冇超過限制 (例如每日/每週可答題數，或者總試玩時間)。 3. 如果超過限制，就顯示提示信息，唔畀佢繼續試玩。"
"步驟 7: 後台 - 高級題目管理","7.1","Excel/CSV 導入題目","喺 Django Admin 或者一個自定義嘅管理員頁面：1. 創建一個表單，畀管理員上傳 Excel (.xlsx) 或者 CSV (.csv) 文件。 2. 後端 view 接收文件後，使用 pandas (處理 Excel/CSV) 或者 Python 內置 csv 模塊解析文件內容。 3. 將文件嘅每一行數據映射到 Question 模型嘅字段 (例如 content, options, correct_answer, subject_id, difficulty, question_type, image 路徑等)。 4. 喺保存之前，調用現有嘅基於內容哈希嘅重複檢測邏輯，避免導入重複題目。 5. 處理圖片：如果 CSV/Excel 包含圖片文件名或者相對路徑，需要有機制處理圖片文件本身嘅上傳同關聯。可以考慮將圖片同 Excel/CSV 打包成 zip 上傳，或者先上傳圖片到某個目錄再喺 Excel 引用。"
"步驟 7: 後台 - 高級題目管理","7.2","AI 生成題目 (整合準備)","為 Question 模型添加一個 is_ai_generated (BooleanField, default=False) 字段。喺管理員界面 (例如科目管理頁面)，可以考慮加入一個按鈕『為此科目 AI 生成題目』。點擊後，後端可以調用一個服務 (呢個服務本身嘅實現係一個大任務，目前階段可以係一個 placeholder)，該服務會同 ChatGPT/DeepSeek API 互動，根據科目內容生成題目，然後將生成嘅題目保存到數據庫，並將 is_ai_generated 設為 True。"
"步驟 8: 後台 - 用戶管理增強","8.1","查看用戶用量同使用情況","喺 Django Admin 嘅用戶詳情頁面，或者一個自定義嘅管理員儀表板，顯示更多關於用戶活動嘅統計數據。呢啲數據可以從 UserProgress 模型聚合得到，例如：總共練習咗幾多題目。每個科目嘅練習情況 (題目數、正確率)。最近登入時間、考試次數等。"
"步驟 9: 後台 - 題目反饋系統","9.1","創建 QuestionFeedback 模型","喺 questions app (或者一個新嘅 feedback app) 創建一個新模型 QuestionFeedback：question (ForeignKey to Question), user (ForeignKey to User), feedback_text (TextField), submission_date (DateTimeField, auto_now_add=True), status (CharField, e.g., 'open', 'investigating', 'resolved', 'wont_fix', default='open'), admin_notes (TextField, nullable=True, blank=True)。請確保運行 makemigrations 同 migrate。"
"步驟 9: 後台 - 題目反饋系統","9.2","用戶提交反饋界面","喺顯示單個題目嘅頁面 (例如練習界面)，加入一個『反饋此題』嘅按鈕或鏈接。點擊後，彈出一個簡單嘅表單 (或者跳轉到一個新頁面)，畀用戶輸入反饋內容。提交後，保存到 QuestionFeedback 模型。"
"步驟 9: 後台 - 題目反饋系統","9.3","管理員查看同處理反饋","喺 Django Admin 裡面註冊 QuestionFeedback 模型，令管理員可以睇到所有用戶提交嘅反饋。管理員應該可以修改反饋嘅狀態 (例如，從 'open' 改為 'resolved') 同埋添加備註 (admin_notes)。"
"步驟 10: 前端/用戶體驗 (UX) 增強","10.1","移動端適配 (確認與實現)","請檢視現有嘅 templates，確認係咪已經使用咗 Bootstrap 或者 Tailwind CSS (或者決定使用邊一個)。如果未用，請選擇一個框架並整合到項目嘅基礎模板 (base.html)。然後，檢查所有主要頁面 (例如登入、註冊、科目選擇、練習界面、題目列表等)喺唔同尺寸嘅移動設備上嘅顯示效果，並進行必要嘅 CSS 調整，確保良好嘅響應式體驗。"
"步驟 10: 前端/用戶體驗 (UX) 增強","10.2","題目書籤功能","1. 創建一個 BookmarkedQuestion 模型，佢應該係 User 同 Question 之間嘅多對多關係 (可以直接用 ManyToManyField 喺 User 或 Question 模型，或者創建一個明確嘅中間表)。 2. 喺顯示題目嘅地方 (例如練習界面)，加入一個『收藏此題』/『取消收藏』嘅按鈕。呢個按鈕嘅狀態應該根據題目係咪已經被當前用戶收藏而變化。點擊後，通過 AJAX 或者表單提交更新用戶嘅收藏列表。 3. 創建一個新嘅 view 同 template，列出當前登入用戶所有已收藏嘅題目。"
"步驟 10: 前端/用戶體驗 (UX) 增強","10.3","題目搜索與過濾","1. 喺用戶可以瀏覽題目列表或者開始練習嘅頁面 (例如 practice_subject_selection.html 或者一個新嘅題目瀏覽頁面)，加入搜索框同過濾選項。過濾選項可以包括：科目 (如果係跨科目搜索)、題目類型、難度級別等。 2. 修改相關嘅 view (例如 question_list view 或者 practice_quiz_view 獲取題目嘅部分)，根據用戶提交嘅搜索關鍵詞同過濾條件，使用 Django 嘅 Q 對象或者 django-filter 庫嚟篩選 Question 數據庫。"
"步驟 11: 排行榜與激勵","11.1","實現排行榜邏輯","創建一個新嘅 view 用嚟顯示模擬考試排行榜。1. 你需要決定排行榜嘅維度 (例如，按科目嘅最高分排行，或者總分排行)。 2. 從 UserProgress 模型 (或者一個專門記錄考試結果嘅模型) 聚合數據，計算用戶嘅排名。可以考慮只顯示最近一段時間內嘅考試成績。"
"步驟 11: 排行榜與激勵","11.2","顯示排行榜","為排行榜 view 創建一個 template，清晰噉顯示用戶名 (或者暱稱) 同佢哋嘅分數/排名。"
"步驟 11: 排行榜與激勵","11.3","(可選) Redis 緩存排行榜數據","如果排行榜查詢變得頻繁且耗時，考慮引入 Redis 嚟緩存排行榜數據，以提高性能。你需要安裝 django-redis，配置 Redis 連接，然後喺排行榜 view 裡面實現緩存讀取同寫入邏輯。" 