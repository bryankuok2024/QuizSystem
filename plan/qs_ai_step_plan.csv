ID,阶段 (Phase),模块 (Module),子模块/功能点 (Sub-Module/Feature),开发步骤 (Development Step),建议的用户给AI的指令 (Suggested User Prompt for AI),预期成果 (Expected Outcome),相关模型/文件 (Relevant Models/Files),优先级 (Priority)
"PH1_001","阶段1: 核心前端与基础练习","用户模块","Apple OAuth登录","集成django-allauth以支持Apple ID注册和登录。","请指导我完成使用 django-allauth 集成 Apple ID 登录的步骤，包括在 Apple Developer 注册应用、配置 settings.py 中的 SOCIALACCOUNT_PROVIDERS 以及更新登录模板。","用户可以使用Apple ID在网站上注册和登录。","users app, allauth, settings.py, account/login.html","中"
"PH1_002","阶段1: 核心前端与基础练习","题库核心功能 - 前端","科目列表展示 (用户视图)","创建一个公开页面，展示所有科目列表，包括科目名称、描述、价格。用户可点击科目。","请在 `questions` 应用中创建一个新的视图 (例如 `SubjectListView`，使用 Django `ListView`) 和对应URL，用于展示所有 `Subject`。模板 `questions/subject_list.html` 应清晰展示科目名称、描述和价格，并为每个科目提供链接（指向下一步科目详情页）。请使用基础HTML/CSS或Bootstrap进行布局。","用户可以通过 `/subjects/` URL看到科目列表页面。","questions/models.py (Subject), questions/views.py, questions/urls.py, questions/templates/questions/subject_list.html","高"
"PH1_003","阶段1: 核心前端与基础练习","题库核心功能 - 前端","科目详情与题目预览 (用户视图)","用户点击科目后，跳转到科目详情页，展示科目信息及该科目下的题目列表（仅题目内容，分页）。","接续 `SubjectListView`，请创建 `SubjectDetailView` (可使用 Django `DetailView` 结合 `ListView` 功能) 和模板 `questions/subject_detail.html`。页面显示所选科目信息，并分页列出该科目下题目（每页10题，仅显示题目内容和题型）。更新 `SubjectListView` 中的链接指向此视图 (URL如 `/subjects/<subject_pk>/`)。","用户可查看科目详情及题目列表。","questions/models.py (Subject, Question), questions/views.py, questions/urls.py, questions/templates/questions/subject_detail.html","高"
"PH1_004","阶段1: 核心前端与基础练习","题库核心功能 - 交互","基础练习模式 (单题作答)","在科目详情的题目列表旁为每题添加"开始练习"按钮。点击后进入单题练习界面，显示题目、选项，用户提交答案后，系统判断对错并显示解析。","请为 `questions` 应用创建 `PracticeQuestionView` 和模板 `questions/practice_question.html`。视图接收题目ID，获取题目对象。模板展示完整题目、图片、选项。创建 Django Form (`QuestionAnswerForm`) 用户提交答案。POST后，视图判断答案与 `Question.correct_answer`，返回结果（正确/错误）和解析给模板显示。URL如 `/questions/<question_pk>/practice/`。","用户可针对单题练习并获即时反馈。","questions/models.py (Question), questions/views.py, questions/forms.py, questions/urls.py, questions/templates/questions/practice_question.html","高"
"PH1_005","阶段1: 核心前端与基础练习","题库核心功能 - 交互","整合试玩题目数量","根据 `Subject.trial_questions_count` 限制未购买科目用户的练习题目数量。在科目详情页或练习模式中体现。","请修改 `SubjectDetailView` 和/或 `PracticeQuestionView`。如果用户未购买该科目（假设 `user.has_purchased(subject)` 方法，暂返回False），则该科目只允许练习 `subject.trial_questions_count` 数量的题目。可在详情页只显示试玩题，或练习时限制。","未购买科目的用户只能练习有限数量的试玩题目。","questions/models.py (Subject), questions/views.py, (需用户购买状态逻辑 - 后续)","中"
"PH2_001","阶段2: 用户进度与模考基础","用户体验","用户进度追踪模型","创建 `UserProgress` 模型记录用户各科目学习进度（完成题目数、模拟考试最高分等）。","请在 `progress` 应用 (若无则新建) `models.py` 中定义 `UserProgress` 模型。字段：`user` (ForeignKey to User), `subject` (ForeignKey to Subject), `completed_questions_count` (PositiveIntegerField), `correct_answers_count` (PositiveIntegerField), `last_score` (FloatField, nullable), `highest_score` (FloatField, nullable), `details` (JSONField, 可存错题ID列表等), `updated_at` (DateTimeField auto_now)。注册到admin并迁移。","数据库有表存储用户学习进度。","progress/models.py, progress/admin.py, users/models.py (User)","高"
"PH2_002","阶段2: 用户进度与模考基础","题库核心功能 - 交互","练习模式与进度记录","更新基础练习模式，在用户正确回答问题后，更新 `UserProgress` 中的 `completed_questions_count` 和 `correct_answers_count`。","请修改 `PracticeQuestionView` 的逻辑。当用户正确回答一道题目后，获取或创建对应的 `UserProgress` 实例，并增加其 `completed_questions_count` 和 `correct_answers_count`。","用户练习行为能被记录到进度中。","progress/models.py (UserProgress), questions/views.py (PracticeQuestionView)","高"
"PH2_003","阶段2: 用户进度与模考基础","题库核心功能 - 交互","模拟考试数据模型","创建 `ExamSession` 模型存储用户参与的一次模拟考试的记录，包括选择的题目、用户答案、得分等。","请在 `questions` 或新建的 `exams` 应用中定义 `ExamSession` 模型。字段：`user` (FK to User), `subject` (FK to Subject), `questions_list` (JSONField, 存储本次考试抽取的Question ID列表), `user_answers` (JSONField, 存储用户对每个问题的答案), `score` (FloatField), `start_time` (DateTimeField), `end_time` (DateTimeField, nullable), `is_completed` (BooleanField default False)。注册到admin并迁移。","数据库有表存储模拟考试会话。","exams/models.py (ExamSession), questions/models.py (Question, Subject)","中"
"PH2_004","阶段2: 用户进度与模考基础","题库核心功能 - 交互","基础模拟考试流程 (出题与提交)","创建视图开始模拟考试 (选择科目，生成题目列表)，用户逐题回答或一次性提交所有答案。","请创建 `StartExamView`，用户选择科目后，从该科目随机抽取N道题（例如20题，暂不打乱选项），创建 `ExamSession` 记录。创建 `TakeExamView` 和模板 `exams/take_exam.html`，分页或单页显示考题及选项，用户作答。用户提交后，保存答案到 `ExamSession.user_answers`。","用户可以选择科目开始模拟考试并提交答案。","exams/models.py (ExamSession), exams/views.py, exams/forms.py, exams/templates/exams/take_exam.html","中"
"PH2_005","阶段2: 用户进度与模考基础","题库核心功能 - 交互","模拟考试评分与结果展示","对用户提交的模拟考试答案进行评分，计算得分，更新 `ExamSession` 和 `UserProgress`，并向用户展示考试结果和解析。","请在 `TakeExamView` (或新的 `ExamResultView`) 中添加评分逻辑。遍历 `ExamSession.questions_list` 和 `ExamSession.user_answers`，对照 `Question.correct_answer` 计算得分。更新 `ExamSession.score`, `ExamSession.is_completed`, `ExamSession.end_time`。更新 `UserProgress.last_score`, `UserProgress.highest_score`。创建 `exams/exam_result.html` 模板展示分数和题目解析。","用户完成模考后可以看到分数和解析，进度被记录。","exams/models.py (ExamSession), progress/models.py (UserProgress), exams/views.py, exams/templates/exams/exam_result.html","中"
"PH3_001","阶段3: 购买与支付流程","题库核心功能","题目购买模型","创建 `PurchasedSubject` 模型，关联用户和科目，记录购买状态和有效期（如果需要）。","请在 `payments` 应用 (若无则新建) `models.py` 中定义 `PurchasedSubject` 模型。字段：`user` (FK to User), `subject` (FK to Subject), `purchase_date` (DateTimeField auto_now_add), `is_active` (BooleanField default False), `expiry_date` (DateField, nullable)。注册到admin并迁移。","数据库有表记录用户购买的科目。","payments/models.py (PurchasedSubject), users/models.py (User), questions/models.py (Subject)","高"
"PH3_002","阶段3: 购买与支付流程","题库核心功能 - 交互","购买逻辑与访问控制","在用户访问科目内容（如题目列表、练习、考试）前检查其是否已购买该科目或是否在试玩额度内。","修改 `SubjectDetailView`, `PracticeQuestionView`, `StartExamView` 等视图。增加逻辑：检查当前用户和目标科目是否存在有效的 `PurchasedSubject` 记录 (is_active=True)。如果未购买，则应用 `Subject.trial_questions_count` 限制。","付费内容得到保护，试玩功能按设定生效。","payments/models.py (PurchasedSubject), questions/models.py (Subject), 各相关视图 (views.py)","高"
"PH3_003","阶段3: 购买与支付流程","支付模块","支付页面与收款码展示","在科目列表或详情页提供"购买"按钮。点击后跳转到支付说明页面，显示MPay和中银的静态收款二维码图片及支付金额。","创建 `PaymentView` 和模板 `payments/payment_page.html`。视图接收要购买的科目ID，模板显示科目信息、价格，并展示您提供的静态二维码图片。添加"我已付款"按钮。","用户可以看到支付信息和二维码进行线下支付。","payments/views.py, payments/templates/payments/payment_page.html, questions/models.py (Subject)","中"
"PH3_004","阶段3: 购买与支付流程","支付模块",""我已付款"流程与邮件通知","用户点击"我已付款"后，记录潜在订单（或更新`PurchasedSubject`状态为待审核），并发送邮件给管理员，包含用户信息和购买科目，以便管理员核实。","修改 `PaymentView`。用户点击"我已付款"后：1. 可创建一个 `Order` 模型实例记录待处理订单，或直接创建 `PurchasedSubject` 记录但 `is_active=False`。2. 配置Django邮件发送功能。3. 发送邮件给指定管理员邮箱，内容包含用户名、购买的科目名称和价格。","管理员会收到用户付款通知邮件。","payments/views.py, (需要Order模型或修改PurchasedSubject), settings.py (邮件配置), Django mail functions","中"
"PH3_005","阶段3: 购买与支付流程","后台管理","后台激活购买","管理员在后台（Django Admin）核实收款后，可以手动激活用户的 `PurchasedSubject` 记录 (设置 `is_active=True`)。","在 `payments/admin.py` 中定制 `PurchasedSubjectAdmin` (或 `OrderAdmin`)。提供一个admin action 或直接在列表页允许管理员将 `is_active` 字段从False改为True。","管理员可以方便地为已付款用户开通科目权限。","payments/admin.py, payments/models.py (PurchasedSubject)","中"
"PH4_001","阶段4: 后台强化与用户管理","后台管理","Excel/CSV题目导入","在Django Admin的Question管理后台，增加通过上传Excel或CSV文件批量导入题目的功能，实现基于 `question_hash` 的题目去重。","扩展 `questions/admin.py` 中的 `QuestionAdmin`。1. 添加自定义admin action或独立上传视图。2. 解析CSV/Excel文件，映射到`Question`字段。3. 创建`Question`对象前，生成`question_hash`，检查是否存在以去重。反馈导入结果。","管理员可批量导入题目，系统自动去重。","questions/models.py (Question), questions/admin.py, (可能需pandas/openpyxl)","中"
"PH4_002","阶段4: 后台强化与用户管理","后台管理","管理员用户列表与管理","在Django Admin中提供用户列表，管理员可以查看用户信息，并进行启用/禁用操作。","定制 `django.contrib.auth.admin.UserAdmin` 或创建一个新的 `UserProfileAdmin` (如果您有 `UserProfile` 模型)。在 `list_display` 中添加 `is_active` 字段，并确保它是可编辑的，或提供 admin action 来切换用户的 `is_active` 状态。","管理员可以管理系统用户账户。","django.contrib.auth.models.User, admin.py (for users app)","中"
"PH5_001","阶段5: 高级练习与UX","题库核心功能 - 交互","错题练习模式","根据用户在练习或模拟考试中的错误记录，提供专门的错题练习功能。","创建 `IncorrectQuestionPracticeView`。从 `UserProgress.details` (假设其中存储了错题ID列表) 或通过分析 `ExamSession` 记录获取用户答错的题目ID列表。用户选择科目后，只从这些错题中出题进行练习。","用户可以针对性地练习自己的薄弱环节。","progress/models.py (UserProgress), exams/models.py (ExamSession), questions/views.py (new view)","中"
"PH5_002","阶段5: 高级练习与UX","题库核心功能 - 交互","题目与选项随机化","在模拟考试时，随机打乱题目顺序以及选择题的选项顺序。","修改 `StartExamView` (或题目获取逻辑)，在抽取题目后打乱 `questions_list` 的顺序。修改 `TakeExamView` 和 `practice_question.html` / `take_exam.html` 模板，对于选择题，在渲染选项前打乱 `Question.options` 的顺序（注意要同时处理正确答案的对应）。","增加模拟考试的挑战性和公平性。","exams/views.py, questions/views.py, templates","中"
"PH5_003","阶段5: 高级练习与UX","用户体验","模拟考试倒计时","在模拟考试页面增加倒计时功能。","在 `take_exam.html` 模板中，使用JavaScript实现倒计时器。考试开始时间可以从 `ExamSession.start_time` 获取，或者设定一个固定的考试时长。时间到后可自动提交或提示用户。","增强模拟考试的真实感和紧迫感。","exams/templates/exams/take_exam.html, JavaScript","低"
"PH5_004","阶段5: 高级练习与UX","用户体验","题目书签功能","允许用户收藏重要的题目，并在个人中心查看已收藏的题目列表。","创建 `BookmarkedQuestion` 模型 (User FK, Question FK)。创建视图和模板片段，允许用户在题目旁边点击"收藏"按钮。创建个人中心页面，列出用户所有收藏的题目。","用户可以方便地回顾重要题目。","(new app bookmarks)/models.py, views.py, templates","低"
"PH5_005","阶段5: 高级练习与UX","用户体验","用户学习报告","在用户个人中心展示其学习进度报告，如图表化展示已学题目数、正确率、各科目考试成绩趋势等。","创建 `UserProfileView` 或 `ProgressReportView`。从 `UserProgress` 和 `ExamSession` 模型获取数据。使用图表库 (如Chart.js) 在模板中将数据可视化。","用户可以直观了解自己的学习情况。","progress/models.py, exams/models.py, views.py, templates, JavaScript (Chart.js)","低"
"PH6_001","阶段6: AI集成与内容工具","AI集成","AI题目生成界面 (后台)","管理员在后台选择科目，调用AI接口（ChatGPT/DeepSeek）生成题目和答案，生成内容可供管理员审核和修改后保存。题目需标记为AI生成。","创建 `AIGenerateQuestionView` (admin-only)。选择科目后，准备prompt调用外部AI API。获取返回的题目内容、选项、答案、解析。表单展示这些内容，允许管理员编辑。保存时设置 `Question.is_ai_generated=True`。","提高题目生产效率，丰富题库内容。","questions/models.py (Question), questions/views.py (admin view), (需要API client for ChatGPT/DeepSeek)","中"
"PH6_002","阶段6: AI集成与内容工具","用户体验","题目反馈系统","用户可以对题目内容、答案或解析进行反馈（如报告错误、提出建议）。管理员可在后台查看并处理这些反馈。","创建 `QuestionFeedback` 模型 (User FK, Question FK, feedback_text, status (e.g. open, resolved), created_at)。在题目练习或结果页面添加反馈按钮和表单。创建 `QuestionFeedbackAdmin` 供管理员查看和更新反馈状态。","提升题目质量，增强用户互动。","(new app feedback)/models.py, forms.py, views.py, admin.py","中"
"PH6_003","阶段6: AI集成与内容工具","题库核心功能 - 前端","题目搜索与过滤","用户可以在前端按关键词、科目、难度、题型等条件搜索和过滤题目。","创建 `QuestionSearchView`。使用Django Form处理搜索条件。在视图中使用Q对象或 `django-filter` 库根据条件过滤 `Question` 查询集。在模板中展示过滤结果。","方便用户快速找到目标题目。","questions/models.py (Question), questions/forms.py, questions/views.py, (django-filter optional)","中"
"PH7_001","阶段7: UI/UX优化与其他","用户体验","移动端适配","使用Bootstrap或Tailwind CSS框架，确保所有用户界面在桌面、平板和手机上都有良好的响应式表现。","选择一个CSS框架 (如Bootstrap)。将其集成到项目的 `base.html` 模板中。逐步更新现有模板 (`subject_list.html`, `subject_detail.html`, `practice_question.html`等) 的HTML结构和CSS类，以实现响应式布局。","提升移动端用户的使用体验。","templates (base.html, etc.), static CSS/JS","中"
"PH7_002","阶段7: UI/UX优化与其他","用户体验","排行榜与激励","为模拟考试提供排行榜功能，激励用户。","根据 `ExamSession` 或 `UserProgress` 中的最高分数据为每个科目生成排行榜。可使用 Redis 缓存排行榜数据以提高性能。创建 `LeaderboardView` 展示排名。","增加用户学习的趣味性和竞争性。","exams/models.py, progress/models.py, views.py, (Redis optional)","低"
"PH7_003","阶段7: UI/UX优化与其他","安全与权限","角色权限细化","根据需要，使用Django的Group和Permission机制，为不同用户角色（例如，普通用户、VIP用户、不同权限的管理员）配置更细致的访问权限。","在Django Admin中创建用户组 (Groups)。为这些组分配特定的权限 (Permissions)，这些权限可以针对模型级别（增删改查）或自定义的视图级别。将用户分配到相应的组中。在视图中按需检查用户权限。","确保系统功能按角色安全访问。","django.contrib.auth.models (Group, Permission), admin.py, views.py (permission checks)","中" 