# Generated by Django 5.2.1 on 2025-06-10 13:00

from django.db import migrations
import json

def final_fix_for_options(apps, schema_editor):
    """
    Based on diagnostics, this migration directly parses the string value
    of the 'options' field into a JSON object.
    """
    Question = apps.get_model('questions', 'Question')
    questions_to_fix = Question.objects.filter(id__range=(149, 168))
    
    updated_count = 0
    skipped_count = 0
    
    print("\\n--- Applying Final Options Fix ---")
    print(f"Processing {questions_to_fix.count()} questions (IDs 149-168)...")
    
    for question in questions_to_fix:
        # Based on diagnostics, the problematic data is a string.
        if isinstance(question.options, str):
            try:
                # Directly parse the string into a dictionary
                parsed_dict = json.loads(question.options)
                
                if isinstance(parsed_dict, dict):
                    question.options = parsed_dict
                    question.save(update_fields=['options'])
                    updated_count += 1
                    print(f"  - FIXED Question ID: {question.id}")
                else:
                    print(f"  - SKIPPED Question ID: {question.id} (Parsed data is not a dictionary)")
                    skipped_count += 1
            except json.JSONDecodeError:
                print(f"  - SKIPPED Question ID: {question.id} (String is not valid JSON)")
                skipped_count += 1
        else:
            # The data is already in a correct format (likely a dict) or null.
            skipped_count += 1

    print(f"\\nMigration finished. Successfully updated {updated_count} questions. Skipped {skipped_count} questions.")


class Migration(migrations.Migration):

    dependencies = [
        ('questions', '0007_fix_options_format'),
    ]

    operations = [
        migrations.RunPython(final_fix_for_options, migrations.RunPython.noop),
    ] 