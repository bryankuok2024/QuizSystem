"""
Django settings for quizApp project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
from pathlib import Path
import os

# 加載環境變量
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 將項目根目錄 (QuizSystem/) 添加到 sys.path，以便能找到 users 应用
# QuizSystem/ 是 BASE_DIR 的父目录
PROJECT_ROOT_FOR_APPS = BASE_DIR.parent
sys.path.insert(0, str(PROJECT_ROOT_FOR_APPS))

# Construct the path to the .env file located in the BASE_DIR
dotenv_path = BASE_DIR / '.env'
# print(f"[SETTINGS.PY DEBUG] Attempting to load .env from: {dotenv_path}") # Debug print removed

# Load the .env file specifying the path
# load_dotenv() # Original call, implicitly finds .env
load_dotenv(dotenv_path=dotenv_path, verbose=False, override=True) 
# verbose=True will print a message if the file is found and loaded.
# override=True will ensure .env variables override any existing os.environ variables (useful for consistency).

# Check if .env was loaded by checking a known variable immediately
# print(f"[SETTINGS.PY DEBUG] AFTER load_dotenv - USE_GMAIL_SMTP from os.getenv: '{os.getenv('USE_GMAIL_SMTP', 'NOT_FOUND_AFTER_LOAD')}'") # Debug print removed


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@=i^4%@^21blfk=voxscjc@58c64b-j4x8a08q1fjq*==y3=ci'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # django-allauth 必需
    
    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # 添加 Google 提供商
    
    # Local apps
    'users.apps.UsersConfig',
    'questions',
    'payments.apps.PaymentsConfig',
    'progress.apps.ProgressConfig',
]

# allauth 设置
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'none'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
SOCIALACCOUNT_AUTO_SIGNUP = True

# django-allauth 必需的 SITE_ID
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # django-allauth 必需
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quizApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'quizApp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'quiz_db',
        'USER': 'root',
        'PASSWORD': 'Yenoo5581',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'sql_mode': 'STRICT_TRANS_TABLES',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hant'  # 繁體中文
TIME_ZONE = 'Asia/Hong_Kong'  # 香港時區

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery 配置
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 分鐘
CELERY_TASK_SOFT_TIME_LIMIT = 60  # 60 秒

# Celery Beat 配置（用於定時任務）
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# 郵件設置
# 加載 .env 文件 (已在文件頂部通過 dotenv_path 明確加載)

# 從環境變量中讀取最終要使用的郵件配置
FINAL_USE_GMAIL_SMTP = os.getenv('USE_GMAIL_SMTP', 'False').lower() == 'true'
FINAL_EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
FINAL_EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '') # 密碼本身，非布爾值
FINAL_DEFAULT_FROM_EMAIL_ENV = os.getenv('DEFAULT_FROM_EMAIL', '')

# print("\n" + "="*20 + " FINAL EMAIL CONFIG VALUES FOR IF CONDITION " + "="*20) # Debug print removed
# print(f"SETTINGS.PY DEBUG: FINAL_USE_GMAIL_SMTP (boolean): {FINAL_USE_GMAIL_SMTP}") # Debug print removed
# print(f"SETTINGS.PY DEBUG: FINAL_EMAIL_HOST_USER (string): '{FINAL_EMAIL_HOST_USER}'") # Debug print removed
# print(f"SETTINGS.PY DEBUG: FINAL_EMAIL_HOST_PASSWORD is set? {'YES' if FINAL_EMAIL_HOST_PASSWORD else 'NO_OR_EMPTY'}") # Debug print removed
# print(f"SETTINGS.PY DEBUG: FINAL_DEFAULT_FROM_EMAIL_ENV (string): '{FINAL_DEFAULT_FROM_EMAIL_ENV}'") # Debug print removed
# print("="*70 + "\n") # Debug print removed

if FINAL_USE_GMAIL_SMTP and FINAL_EMAIL_HOST_USER and FINAL_EMAIL_HOST_PASSWORD:
    # print("✅ [CONDITION MET] Configuring to use Gmail SMTP.") # Debug print can be removed or kept if useful
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    
    # 檢測郵件服務商並設置相應的 SMTP 配置 (主要針對 Gmail)
    if '@gmail.com' in FINAL_EMAIL_HOST_USER or '@yenoo.co' in FINAL_EMAIL_HOST_USER:
        EMAIL_HOST = 'smtp.gmail.com'
        EMAIL_PORT = 587
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False # Gmail 使用 TLS，而不是直接 SSL
        # print("   ✅ Using Gmail specific SMTP server settings (smtp.gmail.com:587 TLS).") # Debug print can be removed
    else:
        # 如果不是 Gmail 或 yenoo.co，但仍然要求使用 SMTP，則使用通用的環境變量
        # (儘管當前邏輯主要針對 Gmail，這裡作為一個回退，但可能需要更完善的通用配置)
        EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com') # 默認為 gmail，但可以被 .env 中的 EMAIL_HOST 覆蓋
        EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
        EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
        EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
        # print("   ⚠️ Using generic SMTP server settings from .env (or defaults if not set).") # Debug print can be removed

    EMAIL_HOST_USER = FINAL_EMAIL_HOST_USER
    EMAIL_HOST_PASSWORD = FINAL_EMAIL_HOST_PASSWORD
    DEFAULT_FROM_EMAIL = FINAL_DEFAULT_FROM_EMAIL_ENV if FINAL_DEFAULT_FROM_EMAIL_ENV else f'QuizSystem <{FINAL_EMAIL_HOST_USER}>'
    SERVER_EMAIL = FINAL_EMAIL_HOST_USER  # 用於伺服器錯誤通知
    EMAIL_TIMEOUT = 60
    EMAIL_USE_LOCALTIME = False
    # print(f"   ✅ SMTP Configured: HostUser='{EMAIL_HOST_USER}', From='{DEFAULT_FROM_EMAIL}'") # Debug print can be removed

else:
    # print("ℹ️ [CONDITION NOT MET or SMTP DISABLED] Configuring to use Console Email Backend.") # Debug print can be removed
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'QuizSystem Console <noreply@quizsystem.com>'
    # 清理可能殘留的 SMTP 相關變量，以防意外使用
    EMAIL_HOST_USER = None 
    EMAIL_HOST_PASSWORD = None
    EMAIL_HOST = None
    EMAIL_PORT = None
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False

EMAIL_SUBJECT_PREFIX = '[題庫系統] '

# 緩存設置 (恢復為 Redis)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://localhost:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # 'LOCATION': 'unique-snowflake', # locmem cache 需要一個 location name
    }
}

# Session 設置 (恢復為 Redis)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_ENGINE = 'django.contrib.sessions.backends.db' # 改為數據庫會話
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 小時
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = False  # 生產環境設為 True

# 日誌設置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'users': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'questions': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'payments': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'progress': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# 創建日誌目錄
log_dir = BASE_DIR / 'logs'
os.makedirs(log_dir, exist_ok=True)

# ================================
# Django-allauth 配置
# ================================

# 登入/登出 URL 設置
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# allauth 帳戶配置
ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

# ACCOUNT_USERNAME_REQUIRED = False      # 明確設置 username 不是必需的 # REMOVED due to deprecation and covered by ACCOUNT_SIGNUP_FIELDS

# ACCOUNT_EMAIL_REQUIRED = True is deprecated and its intent is covered by ACCOUNT_SIGNUP_FIELDS

ACCOUNT_SIGNUP_FIELDS = ['email*'] # UPDATED to mark fields as required

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_UNIQUE_EMAIL = True

ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True # Ensure this is True

# 登入嘗試和郵件確認的速率限制
# ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5  # DEPRECATED
# ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # DEPRECATED (5 minutes)
# ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180 # DEPRECATED (3 minutes) <- This one to be removed from later in the file if present

ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/5m',  # 5 attempts per 5 minutes
    'confirm_email': '1/3m', # 1 attempt per 3 minutes (for resending confirmation)
    # You can add other rate limits here as needed, e.g., 'signup', 'password_reset'
}

# Session 和 Cookie 設置
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGOUT_ON_GET = False  # 需要 POST 請求才能登出
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False  # 更改密碼後不自動登出

# Email 設置
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # 郵件確認連結過期天數
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True  # 使用 HMAC 簽名
# ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180  # 重新發送確認郵件冷卻時間（秒） <- REMOVE THIS LINE # REMOVED

# 密碼設置
ACCOUNT_PASSWORD_MIN_LENGTH = 8  # 密碼最小長度
ACCOUNT_PASSWORD_INPUT_TYPE = 'password'  # 密碼輸入類型

# 用戶名設置（雖然不需要，但保留設置）
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_USERNAME_BLACKLIST = ['admin', 'root', 'administrator', 'test', 'quiz', 'system']

# 表單設置
ACCOUNT_FORMS = {
    'signup': 'users.forms.CustomSignupForm',
    # 'login': 'users.forms.CustomLoginForm',
}

# 適配器設置（可用於自定義行為）
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# 社交帳戶設置
SOCIALACCOUNT_AUTO_SIGNUP = True        # 通過社交賬號自動註冊
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none' # 社交賬號登錄時不進行額外的郵件驗證
SOCIALACCOUNT_EMAIL_REQUIRED = True     # 確保社交賬號也需要郵箱
SOCIALACCOUNT_LOGIN_ON_GET = True       # 嘗試在 GET 請求時直接完成社交登錄，可能跳過中間確認頁面

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '1016880446469-81emkv2sp7ra2pvlopnof16u59i16bgs.apps.googleusercontent.com',
            'secret': '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',
            'key': '' # 通常不需要為 Google 設置 key
        },
        'SCOPE': [ # 請求的權限範圍
            'profile',
            'email',
        ],
        'AUTH_PARAMS': { # 額外的認證參數
            'access_type': 'online',
        }
        # 可選：如果您想讓用戶在每次登錄時都選擇 Google 帳戶，即使他們只有一個帳戶
        # 'AUTH_PARAMS': {'prompt': 'select_account'},
    }
}

# 自定義 allauth 模板標籤（可選）
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'  # 生產環境改為 'https'

# 用戶模型設置（如果有自定義用戶模型）
# AUTH_USER_MODEL = 'users.CustomUser'

# 繁體中文本地化設置
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[題庫系統] '

# 開發環境特殊設置
if DEBUG:
    # 開發環境下可以跳過郵件驗證（僅用於測試）
    # ACCOUNT_EMAIL_VERIFICATION = 'optional'
    pass
