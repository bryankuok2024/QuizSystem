"ID"|"階段 (Phase)"|"功能模塊 (Module)"|"子模塊/功能 (Sub-Module/Feature)"|"開發步驟 (Development Step)"|"當前狀態 (Status)"|"AI 提示/開發建議 (AI Prompt/Suggestion)"|"相關模型/文件 (Relevant Models/Files)"|"優先級 (Priority)"
"PH1-01"|"核心基礎"|"使用者系統"|"主頁與科目展示"|"開發一個多功能的儀表板主頁, 按主科目對子科目進行分組展示。為登入用戶顯示個人化資訊, 如歡迎語, 已購狀態和學習進度。"|"已完成"|"當前 HomePageView 實現良好, 有效地利用了 prefetch_related 來優化查詢。前端的 JS 搜索功能可考慮移至後端以支持更複雜的查詢。"|"pages/views.HomePageView, pages/templates/pages/home.html, questions/models.MajorSubject"|"核心"
"PH1-02"|"核心基礎"|"題庫核心"|"科目與題庫模型"|"建立 MajorSubject, Subject, Question, Tag 模型。Question 模型需支持文本/圖片內容, 多種題型, 難度及AI生成標記。"|"已完成"|"模型結構合理, 已包含 price (價格) 和 trial_questions_count (試玩題數) 字段, 為後續功能奠定基礎。"|"questions/models.py"|"核心"
"PH1-03"|"核心基礎"|"題庫核心"|"單題練習模式"|"用戶可針對特定題目進行練習。系統能接收答案, 判斷對錯, 並立即顯示結果與解析。"|"已完成"|"PracticeQuestionView 已實現此功能。其 QuestionAnswerForm 能動態適配不同題型, 設計優良。"|"questions/views.PracticeQuestionView, questions/forms.QuestionAnswerForm, questions/templates/practice_question.html"|"核心"
"PH1-04"|"核心基礎"|"題庫核心"|"科目練習模式 (試玩)"|"用戶可選擇一個科目進行多題練習。此模式整合了試玩邏輯, 未購買的用戶只能練習有限數量的題目。"|"已完成"|"practice_quiz_view 成功實現了此功能, 包含完整的提交、評分和結果展示邏輯。"|"questions/views.practice_quiz_view, questions/templates/practice_quiz_interface.html"|"高"
"PH1-05"|"核心基礎"|"模擬考試"|"模擬考試流程"|"實現完整的模擬考試流程：從隨機抽題開始, 到限時作答, 再到提交後查看詳細的成績報告。"|"已完成"|"exams 應用的 Start/Take/Result 視圖流程清晰, 功能完整。ExamSession 模型設計合理。"|"exams/models.py, exams/views.py, exams/templates/take_exam.html, exams/templates/exam_result.html"|"高"
"PH1-06"|"核心基礎"|"使用者系統"|"基本用戶進度追蹤"|"建立 UserProgress 模型記錄用戶在各科目上的練習次數, 答對題數和最高分。"|"部分完成"|"模型已建立並能記錄分數。待辦： 需新增字段以支持"連續學習天數"和更結構化的"錯題記錄"。"|"progress/models.py"|"高"
"PH1-07"|"核心基礎"|"使用者系統"|"帳號註冊與登入"|"整合 django-allauth, 支持 Email 和 Google 帳號註冊與登入。"|"部分完成"|"Email/Google 登入已配置。待辦： 需在 settings.py 中啟用並配置 Apple OAuth Provider 以完成 Apple 登入功能。"|"core_settings/settings.py, allauth"|"高"
"PH2-01"|"UX & 互動"|"使用者系統"|"進階用戶進度報告"|"建立一個專門的用戶進度頁面, 以圖表 (如 Chart.js) 形式展示學習歷史、各科目強弱項分析。"|"待辦"|"建議： 創建 progress/views.py 和對應的 URL。視圖中查詢 UserProgress 和 ExamSession 的歷史數據, 匯總後傳遞給模板。"|"progress/views.py, progress/urls.py, templates/progress/report.html"|"高"
"PH2-02"|"UX & 互動"|"題庫核心"|"錯題本功能"|"根據 UserProgress 中記錄的錯題 ID, 建立一個頁面讓用戶可以集中練習所有答錯的題目。"|"待辦"|"建議： 擴充 UserProgress 的 details 字段或建立新 WrongAnswer 模型。創建 WrongAnswerView, 查詢錯題並渲染成一個新的練習介面。"|"progress/models.py, questions/views.py (新視圖)"|"高"
"PH2-03"|"UX & 互動"|"題庫核心"|"題目搜索與過濾"|"在科目列表或專門的搜索頁面, 允許用戶按關鍵詞、題型、難度進行題目過濾。"|"待辦"|"建議： 使用 django-filter 套件。為 Question 模型創建一個 FilterSet 類, 並在視圖中整合, 即可輕鬆實現強大的過濾功能。"|"questions/filters.py, questions/views.py"|"中"
"PH2-04"|"UX & 互動"|"題庫核心"|"題目書籤功能"|"允許用戶在練習或查看題目時收藏重要的題目, 並提供一個書籤列表頁面以便快速訪問。"|"待辦"|"建議： 創建 Bookmark 多對多模型關聯 CustomUser 和 Question。使用 AJAX 端點處理收藏/取消收藏, 避免頁面刷新。"|"users/models.py (新模型), questions/views.py (新視圖/端點)"|"中"
"PH2-05"|"UX & 互動"|"模擬考試"|"考試倒數計時器"|"在 take_exam.html 頁面增加一個視覺化的倒數計時器, 時間結束後自動提交試卷。"|"待辦"|"建議： 使用 JavaScript。在進入頁面時記錄伺服器開始時間和時長, 用 setInterval 每秒更新顯示。時間到時觸發 form.submit()。"|"exams/templates/take_exam.html (JS)"|"中"
"PH2-06"|"UX & 互動"|"模擬考試"|"排行榜與激勵"|"建立一個基於模擬考最高分的排行榜, 可以按科目或總分排名。"|"待辦"|"建議： 對於高流量場景, 可使用 Redis 的 Sorted Set 結構來高效存儲和查詢排行榜。創建一個定時任務 (如 Celery Beat) 來定期更新榜單。"|"progress/models.py, Redis, celery"|"低"
"PH2-07"|"UX & 互動"|"使用者系統"|"題目反饋系統"|"在題目頁面增加一個反饋按鈕, 用戶可以報告題目錯誤或提出建議。"|"待辦"|"建議： 創建 QuestionFeedback 模型, 包含 user, question, feedback_content, status (未處理/已處理) 等字段。"|"feedback/models.py, feedback/forms.py"|"低"
"PH3-01"|"後台與內容"|"後台管理"|"CSV/Excel 題目導入"|"在 Django Admin 中增加導入功能, 允許管理員通過上傳 CSV 或 Excel 文件批量添加題目, 系統需處理重複題目。"|"待辦"|"建議： 整合 django-import-export 套件。為 Question 模型創建 ModelResource, 並在 QuestionAdmin 中繼承 ImportExportModelAdmin。"|"questions/admin.py, django-import-export"|"高"
"PH3-02"|"後台與內容"|"AI 整合"|"AI 題目生成"|"開發一個後台功能, 管理員可選擇一個科目, 調用 ChatGPT 或 DeepSeek API, 根據現有題庫生成新的、風格相似的題目。"|"待辦"|"建議： 創建一個管理命令或後台視圖。Prompt 範例: ""你是一位{subject.name}專家。請根據以下5個範例題目, 為我生成3個新的、難度為'{difficulty}'的{question_type}題目, 並以JSON格式返回, 包含'content', 'options', 'correct_answer'和'explanation'。""","questions/management/commands/generate_ai_questions.py"|"高"
"PH3-03"|"後台與內容"|"後台管理"|"用戶管理儀表板"|"在後台為管理員提供用戶列表, 可以查看用戶的購買記錄、活動狀態, 並能手動啟用/禁用用戶。"|"待辦"|"建議： 在 users/admin.py 中客製化 CustomUserAdmin, 使用 list_display 顯示相關信息, 並添加 admin action 來快速啟用/禁用用戶。"|"users/admin.py"|"中"
"PH4-01"|"支付與安全"|"支付流程"|"靜態二維碼支付"|"實現 MPay/中銀的支付流程：用戶在前端點擊"購買"後, 頁面顯示一個靜態收款二維碼。"|"待辦"|"建議： 由於是靜態碼, 後端無需生成。只需在 payments 應用中創建一個頁面, 展示對應科目的價格和二維碼圖片即可。"|"payments/views.py, payments/templates/show_qr.html"|"高"
"PH4-02"|"支付與安全"|"支付流程"|"手動訂單確認"|"在支付頁面提供一個"我已付款"按鈕。用戶點擊後, 系統向管理員郵箱發送一封包含用戶信息和購買科目的郵件。"|"待辦"|"建議： 創建 confirm_payment 視圖。該視圖不處理支付, 僅使用 Django 的 send_mail 功能發送郵件。需要配置好 settings.py 中的 EMAIL_BACKEND。"|"payments/views.py (新視圖), core_settings/settings.py"|"高"
"PH4-03"|"支付與安全"|"支付流程"|"手動開通科目"|"管理員在收到郵件並確認收款後, 在後台手動創建一條 UserSubjectPurchase 記錄, 為用戶開通科目權限。"|"待辦"|"建議： 在 users/admin.py 中註冊 UserSubjectPurchase 模型。這樣管理員就可以在後台方便地進行"新增"操作。"|"users/admin.py, users/models.UserSubjectPurchase"|"高"
"PH4-04"|"支付與安全"|"安全加固"|"權限與安全審查"|"使用 Django 的 Group 和 Permission 系統, 明確區分普通用戶和管理員權限。全面審查代碼, 防止常見的 Web 攻擊。"|"部分完成"|"Django 默認提供了良好的安全基礎。待辦： 需為後台視圖添加權限檢查 (如 UserPassesTestMixin), 確保只有管理員能訪問特定頁面。"|"django.contrib.auth, views.py 中的 Mixins"|"核心" 