"""
Django settings for quizApp project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
from pathlib import Path
import os

# 加載環境變量
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is now the project root (QUIZSYSTEM/)
BASE_DIR = Path(__file__).resolve().parent.parent

# sys.path modification removed as Django should handle apps in BASE_DIR subdirectories.
# If issues arise, we can revisit:
# sys.path.insert(0, str(BASE_DIR))


# Construct the path to the .env file located in the BASE_DIR (project root)
# More explicit path construction for .env
dotenv_path = BASE_DIR.joinpath('.env')

# print(f"[SETTINGS_DEBUG] EXPECTED .env PATH: {dotenv_path}") # REMOVED BY COMMENTING
# print(f"[SETTINGS_DEBUG] Does .env file exist at this path? {dotenv_path.exists()}") # REMOVED BY COMMENTING

# Load the .env file specifying the path
# verbose=True can be useful for debugging .env loading, consider removing for production.
load_dotenv_success = load_dotenv(dotenv_path=dotenv_path, verbose=True, override=True)
# print(f"[SETTINGS_DEBUG] load_dotenv() call returned: {load_dotenv_success}") # REMOVED BY COMMENTING

# Block of debug prints for SECRET_KEY loading REMOVED BY COMMENTING
# test_secret_key = os.getenv('SECRET_KEY')
# if test_secret_key:
#     print(f"[SETTINGS_DEBUG] SECRET_KEY after load_dotenv: ***{test_secret_key[-5:]} (last 5 chars of SECRET_KEY)")
# else:
#     print("[SETTINGS_DEBUG] SECRET_KEY NOT FOUND in os.environ after load_dotenv() attempt.")

# print(f"[SETTINGS.PY DEBUG] AFTER load_dotenv - USE_GMAIL_SMTP from os.getenv: '{os.getenv('USE_GMAIL_SMTP', 'NOT_FOUND_AFTER_LOAD')}'") # Already commented

# Block of debug prints for DATABASE_PASSWORD loading REMOVED BY COMMENTING
# print(f"[DEBUG settings.py] Attempting to load DATABASE_PASSWORD.")
# retrieved_db_password = os.getenv('DATABASE_PASSWORD')
# if retrieved_db_password:
#     print(f"[DEBUG settings.py] DATABASE_PASSWORD loaded: ***{retrieved_db_password[-3:]} (last 3 chars)")
# else:
#     print("[DEBUG settings.py] DATABASE_PASSWORD NOT FOUND in environment!")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'your_default_fallback_secret_key_if_not_set_in_env') # Load from .env

# SECURITY WARNING: don't run with debug turned on in production!
# Reads DEBUG from .env, defaults to True if not found or if value is not 'False'
DEBUG = os.getenv('DEBUG', 'True').lower() != 'false'

ALLOWED_HOSTS_STRING = os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # django-allauth 必需
    
    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Google provider
    # 'allauth.socialaccount.providers.apple',  # Apple provider - REMOVING FOR NOW
    
    # Local apps
    # Apps should be discoverable if they are in subdirectories of BASE_DIR
    'users.apps.UsersConfig',
    'questions.apps.QuestionsConfig', # UPDATED for explicitness
    'payments.apps.PaymentsConfig',
    'progress.apps.ProgressConfig',
]

# allauth 设置 (舊配置區域 - 逐步移除或替換)
# ACCOUNT_EMAIL_VERIFICATION = os.getenv('ACCOUNT_EMAIL_VERIFICATION', 'none') # 已移動到新配置區域
# LOGIN_REDIRECT_URL = os.getenv('LOGIN_REDIRECT_URL', '/') # 已移動到新配置區域
# LOGOUT_REDIRECT_URL = os.getenv('LOGOUT_REDIRECT_URL', '/') # 已移動到新配置區域
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = int(os.getenv('ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS', 3)) # 已移動到新配置區域
# SOCIALACCOUNT_AUTO_SIGNUP = os.getenv('SOCIALACCOUNT_AUTO_SIGNUP', 'True').lower() == 'true' # 已移動到新配置區域

# New settings based on deprecation warnings and best practices (舊的重複塊，將整合到主配置區)
# ACCOUNT_LOGIN_METHODS = ['email'] 
# ACCOUNT_SIGNUP_FIELDS = ['email'] 
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_USER_MODEL_USERNAME_FIELD = None 
# ACCOUNT_EMAIL_REQUIRED = True 

# django-allauth 必需的 SITE_ID
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # django-allauth 必需
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core_settings.urls' # UPDATED

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Assumes 'templates' is in QUIZSYSTEM/templates/
        'DIRS': [BASE_DIR / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'core_settings.wsgi.application' # UPDATED


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME', 'quiz_db'),
        'USER': os.getenv('DATABASE_USER', 'root'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'), # Loaded from .env
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'sql_mode': 'STRICT_TRANS_TABLES',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hant'  # 繁體中文
TIME_ZONE = 'Asia/Hong_Kong'  # 香港時區

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Assumes 'static/' is in QUIZSYSTEM/static/
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static', 
]
# Assumes 'staticfiles/' will be created in QUIZSYSTEM/staticfiles/ for collectstatic
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
# Assumes 'media/' is in QUIZSYSTEM/media/
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery 配置
# Load Redis password from .env if it exists
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
if REDIS_PASSWORD:
    CELERY_BROKER_URL = f'redis://:{REDIS_PASSWORD}@localhost:6379/0'
    CELERY_RESULT_BACKEND = f'redis://:{REDIS_PASSWORD}@localhost:6379/0'
else:
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 分鐘
CELERY_TASK_SOFT_TIME_LIMIT = 60  # 60 秒

# Celery Beat 配置（用於定時任務）
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# 郵件設置
# 加載 .env 文件 (已在文件頂部通過 dotenv_path 明確加載)

# 從環境變量中讀取最終要使用的郵件配置
FINAL_USE_GMAIL_SMTP = os.getenv('USE_GMAIL_SMTP', 'False').lower() == 'true'
FINAL_EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
FINAL_EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '') # 密碼本身，非布爾值
FINAL_DEFAULT_FROM_EMAIL_ENV = os.getenv('DEFAULT_FROM_EMAIL', '')

# All commented-out debug prints related to email configuration below are to remain commented or be removed.
# print("\\n" + "="*20 + " FINAL EMAIL CONFIG VALUES FOR IF CONDITION " + "="*20)
# print(f"SETTINGS.PY DEBUG: FINAL_USE_GMAIL_SMTP (boolean): {FINAL_USE_GMAIL_SMTP}")
# print(f"SETTINGS.PY DEBUG: FINAL_EMAIL_HOST_USER (string): '{FINAL_EMAIL_HOST_USER}'")
# print(f"SETTINGS.PY DEBUG: FINAL_EMAIL_HOST_PASSWORD is set? {'YES' if FINAL_EMAIL_HOST_PASSWORD else 'NO_OR_EMPTY'}")
# print(f"SETTINGS.PY DEBUG: FINAL_DEFAULT_FROM_EMAIL_ENV (string): '{FINAL_DEFAULT_FROM_EMAIL_ENV}'")
# print("="*70 + "\\n")

if FINAL_USE_GMAIL_SMTP and FINAL_EMAIL_HOST_USER and FINAL_EMAIL_HOST_PASSWORD:
    # print("✅ [CONDITION MET] Configuring to use Gmail SMTP.") # This can be removed
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    
    if '@gmail.com' in FINAL_EMAIL_HOST_USER or '@yenoo.co' in FINAL_EMAIL_HOST_USER:
        EMAIL_HOST = 'smtp.gmail.com'
        EMAIL_PORT = 587
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False
        # print("   ✅ Using Gmail specific SMTP server settings (smtp.gmail.com:587 TLS).") # This can be removed
    else:
        EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
        EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
        EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
        EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
        # print("   ⚠️ Using generic SMTP server settings from .env (or defaults if not set).") # This can be removed

    EMAIL_HOST_USER = FINAL_EMAIL_HOST_USER
    EMAIL_HOST_PASSWORD = FINAL_EMAIL_HOST_PASSWORD
    DEFAULT_FROM_EMAIL = FINAL_DEFAULT_FROM_EMAIL_ENV if FINAL_DEFAULT_FROM_EMAIL_ENV else f'QuizSystem <{FINAL_EMAIL_HOST_USER}>'
    SERVER_EMAIL = FINAL_EMAIL_HOST_USER
    EMAIL_TIMEOUT = 60
    EMAIL_USE_LOCALTIME = False
    # print(f"   ✅ SMTP Configured: HostUser='{EMAIL_HOST_USER}', From='{DEFAULT_FROM_EMAIL}'") # This can be removed

else:
    # print("ℹ️ [CONDITION NOT MET or SMTP DISABLED] Configuring to use Console Email Backend.") # This can be removed
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'QuizSystem Console <noreply@quizsystem.com>'
    # 清理可能殘留的 SMTP 相關變量，以防意外使用
    EMAIL_HOST_USER = None
    EMAIL_HOST_PASSWORD = None
    EMAIL_HOST = None
    EMAIL_PORT = None
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False

EMAIL_SUBJECT_PREFIX = '[題庫系統] '

# 緩存設置 (恢復為 Redis)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': CELERY_RESULT_BACKEND, # Use the same Redis instance as Celery (or a different DB number if preferred)
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # 'LOCATION': 'unique-snowflake', # locmem cache 需要一個 location name
    }
}

# Session 設置 (恢復為 Redis)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_ENGINE = 'django.contrib.sessions.backends.db' # 改為數據庫會話
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 小時
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true' # For production, set to True in .env

# 日誌設置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO', # Console level based on DEBUG status
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'users': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'questions': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'payments': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'progress': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# 創建日誌目錄
log_dir = BASE_DIR / 'logs'
os.makedirs(log_dir, exist_ok=True)

# ================================
# Django-allauth 配置
# ================================

# === Allauth Configuration - Phase 3: Custom Account Adapter ===

# 1. Adapters - Restore CustomAccountAdapter, keep SocialAccountAdapter default for now
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter' # REVERTING TO DEFAULT FOR DEBUGGING
SOCIALACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'

# 2. Core Account Setup (Should be stable from previous step)
# ACCOUNT_AUTHENTICATION_METHOD = 'email' # DEPRECATED - Rely on ACCOUNT_LOGIN_METHODS
# ACCOUNT_EMAIL_REQUIRED = True # DEPRECATED - Rely on ACCOUNT_SIGNUP_FIELDS
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# ACCOUNT_USERNAME_REQUIRED = False # DEPRECATED - Rely on ACCOUNT_SIGNUP_FIELDS
ACCOUNT_LOGIN_METHODS = ['email'] 
ACCOUNT_SIGNUP_FIELDS = ['email*'] # SIMPLIFYING FOR DEBUGGING (will restore first_name later)
ACCOUNT_UNIQUE_EMAIL = True

# 3. Email Verification (Should be stable)
ACCOUNT_EMAIL_VERIFICATION_METHOD = os.getenv('ACCOUNT_EMAIL_VERIFICATION_METHOD', os.getenv('ACCOUNT_EMAIL_VERIFICATION', 'none'))

# 4. Forms (Should be stable)
ACCOUNT_FORMS = {
    'signup': 'allauth.account.forms.SignupForm', # REVERTING TO DEFAULT FOR DEBUGGING
    'login': 'allauth.account.forms.LoginForm',
    # ... other forms ...
}

# 5. Social Account Settings (Should be stable)
SOCIALACCOUNT_EMAIL_VERIFICATION_METHOD = os.getenv('SOCIALACCOUNT_EMAIL_VERIFICATION_METHOD', os.getenv('SOCIALACCOUNT_EMAIL_VERIFICATION', ACCOUNT_EMAIL_VERIFICATION_METHOD))
SOCIALACCOUNT_EMAIL_REQUIRED = True 
SOCIALACCOUNT_AUTO_SIGNUP = os.getenv('SOCIALACCOUNT_AUTO_SIGNUP', 'True').lower() == 'true'
SOCIALACCOUNT_LOGIN_ON_GET = True

# ... (ensure other necessary settings like LOGIN_URL, LOGIN_REDIRECT_URL etc. are present)
# ... (ensure all deprecated/old keys are removed)
# === End of Allauth Configuration ===

LOGIN_REDIRECT_URL = '/' # Redirect to home page after login
# LOGIN_URL = '/accounts/login/' # Default, usually not needed to set explicitly unless changed
# LOGOUT_REDIRECT_URL = '/' # Optional: redirect to home page after logout

# ... (The rest of your settings file) ...

# Load Google OAuth credentials from .env if available
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
# GOOGLE_KEY = os.getenv('GOOGLE_KEY', '') # Optional, usually empty for Google

APPLE_CLIENT_ID = os.getenv('APPLE_CLIENT_ID')
APPLE_KEY_ID = os.getenv('APPLE_KEY_ID')
APPLE_SECRET_KEY_PATH = os.getenv('APPLE_SECRET_KEY_PATH') # Path to .p8 file
APPLE_TEAM_ID = os.getenv('APPLE_TEAM_ID')

# print(f"[SETTINGS DEBUG] GOOGLE_CLIENT_ID from os.getenv: {GOOGLE_CLIENT_ID}") # Keep for now
# print(f"[SETTINGS DEBUG] GOOGLE_CLIENT_SECRET from os.getenv: {GOOGLE_CLIENT_SECRET}") # Keep for now

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # 'APP': {  # <-- 註釋掉或移除這整個 APP 字典
        #     'client_id': GOOGLE_CLIENT_ID,
        #     'secret': GOOGLE_CLIENT_SECRET,
        #     'key': GOOGLE_KEY 
        # },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    # 'apple': { # REMOVING APPLE CONFIG FOR NOW
    #     'APP': {
    #         'client_id': APPLE_CLIENT_ID,
    #         'secret': APPLE_SECRET_KEY_PATH, # For Apple, 'secret' is the path to the .p8 key file or its content
    #         'key': APPLE_KEY_ID, # Key ID for Apple
    #     },
    #     'TEAM_ID': APPLE_TEAM_ID,
    #     'SCOPE': ['name', 'email'],
    #     # 'EMAIL_AUTHENTICATION': False, # Set to True if you want to use Apple ID as primary email source
    # }
}

# CRITICAL DEBUG PRINT:
print("-" * 30)
print(f"[SETTINGS.PY DEBUG] GOOGLE_CLIENT_ID as loaded by os.getenv: '{GOOGLE_CLIENT_ID}'")
print(f"[SETTINGS.PY DEBUG] GOOGLE_CLIENT_SECRET as loaded by os.getenv: '{GOOGLE_CLIENT_SECRET}'")
print(f"[SETTINGS.PY DEBUG] SOCIALACCOUNT_PROVIDERS['google']['APP'] resolved to: {SOCIALACCOUNT_PROVIDERS.get('google', {}).get('APP')}")
print("-" * 30)

# Email settings (ensure these are below SOCIALACCOUNT_PROVIDERS and other allauth settings)
# ... existing code ...

# 自定義 allauth 模板標籤（可選）
ACCOUNT_DEFAULT_HTTP_PROTOCOL = os.getenv('ACCOUNT_DEFAULT_HTTP_PROTOCOL', 'http') # For production: 'https'

# 用戶模型設置（如果有自定義用戶模型）
# AUTH_USER_MODEL = 'users.CustomUser'

# 繁體中文本地化設置
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[題庫系統] '

# 開發環境特殊設置
if DEBUG:
    # 開發環境下可以跳過郵件驗證（僅用於測試）
    # ACCOUNT_EMAIL_VERIFICATION = 'optional'
    pass

# Ensure ACCOUNT_ADAPTER and SOCIALACCOUNT_ADAPTER are still pointing to the custom ones for now,
# or default ones if we are still testing that. The last change set them to default.
# For this step, we assume we are still on default adapters to confirm warning fixes.
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter' # ENSURING CONSISTENCY WITH ABOVE CHANGE
SOCIALACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'

ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True # Skip logout confirmation page

